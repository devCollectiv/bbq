import {log} from "./logClient";
import {sanityClient} from "./sanityClient";
import {ColdLeadAttempt, SanityRef, SanityVerificationQuestion} from "../../src/utils/Types";
import {v4 as uuidv4} from "uuid";

export type SanityImage = {
  _type: "image"
  asset?: {
    _type?: string
    _id?: string
    url?: string
    _ref?: string
  }
}

export type SanityDesignToProcess = {
  _id?: string
  slug?: string
  title?: string
  basePrice?: number
  imageSrc?: SanityImage
  width?: number
  height?: number
  processThisDesign?: boolean
  designResult?: any
  description?: string
}

export type SanityDesign = {
  _id?: string
  slug?: string
  title?: string
  basePrice?: number
  imageSrc?: SanityImage
  width?: number
  height?: number
  description?: string
}

export type SanityCsvToProcess = {
  objectType?: string
  description?: string
  createdDocuments?: string[]
  csvFile?: any
}

export type SanitySlug = {
  current: string
}

const createSanityDesign = (designRequest: SanityDesignToProcess, sanityImageAsset: any) => {
  log("createSanityDesign", "NOTICE", "uploaded an image result: ", sanityImageAsset);
  const newDesign: SanityDesign = {
    imageSrc: {
      _type: "image",
      asset: {
        _type: "reference",
        _ref: sanityImageAsset._id ?? "",
      },
    },
    slug: designRequest.slug ?? "",
    title: designRequest.title ?? "",
    basePrice: designRequest.basePrice ?? 0,
    description: designRequest.description ?? "",
    width: designRequest.width ?? 0,
    height: designRequest.height ?? 0,
  };

  log("createSanityDesign", "NOTICE", "potential design ", newDesign);

  return sanityClient.create({
    _type: "design",
    ...newDesign,
  });
};

const createSanityDocument = async (document: any, sanityType: string) => {
  const newSanityDocument = {
    _type: sanityType,
    isAutoGenerated: true,
    ...document,
    slug: document.slug ? {current: document.slug ?? ""} : undefined,
  };

  log("createSanityItemDocument", "NOTICE", "processing sanity document", document);

  if (!document.slug || !sanityType) {
    log("createSanityItemDocument", "ERROR", "Can't process this document", {document, sanityType});

    // eslint-disable-next-line prefer-promise-reject-errors
    return Promise.reject();
  }

  const foundItem: any = await sanityClient
      .fetch(
          "*[_type == $type && slug.current == $slug]", {
            slug: document.slug,
            type: sanityType,
          }).then((data: any[]) => data[0]);

  if (foundItem) {
    log("createSanityItemDoc", "NOTICE", "updating document with slug: ", {
      foundItem,
      slug: document.slug,
      type: sanityType,
      potentialDocument: newSanityDocument,
    });

    return sanityClient.patch(foundItem._id).set({
      ...newSanityDocument,
    }).commit();
  } else {
    log("createSanityItemDoc", "NOTICE", "creating document with slug ", newSanityDocument);

    return sanityClient.create({
      ...newSanityDocument,
    });
  }
};

const updateDesignToProcess = (designReq: SanityDesignToProcess, designResult: SanityDesign) => {
  const designToProcessUpdateReq = {
    designResult: {
      _type: "reference",
      _ref: designResult._id,
    },
    processThisDesign: false,
  };

  log("updateDesignToProcess", "NOTICE", "Updating Design Creation Request", designToProcessUpdateReq);

  return sanityClient
      .patch(designReq._id)
      .set({
        ...designToProcessUpdateReq,
      }
      )
      .commit();
};

const fetchVerificationQuestion = (questionId: string) => {
  console.log("fetchVerificationQuestion");

  return sanityClient
      .fetch(
          `*[_type == "verificationQuestion" && _id == $questionId && isEnabled != true]{
          _id,
          slug,
          levelOfDifficulty,
          question,
          correctAnswer,
          incorrectAnswers[],
          imageSrc{
            asset->{
              url,
              metadata
             }
          },
          category{
             category
          },
       }`,
          {questionId}
      ).then((data: SanityVerificationQuestion[]) => {
        console.log("THe verification question raw", data);
        return data[0];
      });
};

const createLead = (email: string): Promise<any> => {
  if (!email) {
    console.log("createLead", "ERROR", "could not create Lead no Email");
    return Promise.reject(Error("could not create Lead no email from user"));
  }

  console.log("createLead", "NOTICE", "potential Lead ", email);

  return sanityClient.create({
    _type: "coldLead",
    email: email,
  }).catch((e: any) => {
    console.log("createLead", "ERROR", "could not create cold Lead", e);
    return e;
  });
};

export type UpdateLeadRequest = {
  email?: string
  easyAttempt?: ColdLeadAttempt
  mediumAttempt?: ColdLeadAttempt
  hardAttempt?: ColdLeadAttempt
  imageAttempt?: ColdLeadAttempt
  _id?: string
}

const updateLead = (request: UpdateLeadRequest): Promise<UpdateLeadRequest> => {
  const LOG = `update-lead-${request._id}`;

  console.log(LOG, "sendingupdate lead req", request);

  try {
    return sanityClient
        .patch(request._id ?? "")
        .setIfMissing({
          easyAttempt: request.easyAttempt,
          mediumAttempt: request.mediumAttempt,
          hardAttempt: request.hardAttempt,
          imageAttempt: request.imageAttempt,
        })
        .commit();
  } catch (e) {
    console.log(LOG, "error: ", e);
    // eslint-disable-next-line prefer-promise-reject-errors
    return Promise.reject(e);
  }
};

const utils = {
  convertToSlugStr: (slugStr: string) => {
    return slugStr
        .toLowerCase()
        .replace(/ /g, "-")
        .replace(/[^\w-]+/g, "");
  },
  convertToSlugObj: (slugStr: string):SanitySlug => {
    return {
      current: slugStr,
    };
  },
  getSanityDocumentRef: (sanityId: string): SanityRef => ({
    _type: "reference",
    _ref: sanityId,
  }),
  getSanityKeyedValue: (value: any) => {
    return {
      _key: uuidv4(),
      value: value,
    };
  },
};


export default {
  createSanityDocument,
  createSanityDesign,
  updateDesignToProcess,
  fetchVerificationQuestion,
  createLead,
  updateLead,
  utils,
};
